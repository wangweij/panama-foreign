// Generated by jextract

package com.sun.security.auth.module.unix.pwd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class passwd {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("pw_name"),
        ADDRESS.withName("pw_passwd"),
        JAVA_INT.withName("pw_uid"),
        JAVA_INT.withName("pw_gid"),
        JAVA_LONG.withName("pw_change"),
        ADDRESS.withName("pw_class"),
        ADDRESS.withName("pw_gecos"),
        ADDRESS.withName("pw_dir"),
        ADDRESS.withName("pw_shell"),
        JAVA_LONG.withName("pw_expire")
    ).withName("passwd");
    public static MemoryLayout $LAYOUT() {
        return passwd.$struct$LAYOUT;
    }
    static final VarHandle pw_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_name"));
    public static VarHandle pw_name$VH() {
        return passwd.pw_name$VH;
    }
    public static MemoryAddress pw_name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_name$VH.get(seg);
    }
    public static void pw_name$set( MemorySegment seg, MemoryAddress x) {
        passwd.pw_name$VH.set(seg, x);
    }
    public static MemoryAddress pw_name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_name$set(MemorySegment seg, long index, MemoryAddress x) {
        passwd.pw_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_passwd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_passwd"));
    public static VarHandle pw_passwd$VH() {
        return passwd.pw_passwd$VH;
    }
    public static MemoryAddress pw_passwd$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_passwd$VH.get(seg);
    }
    public static void pw_passwd$set( MemorySegment seg, MemoryAddress x) {
        passwd.pw_passwd$VH.set(seg, x);
    }
    public static MemoryAddress pw_passwd$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_passwd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_passwd$set(MemorySegment seg, long index, MemoryAddress x) {
        passwd.pw_passwd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_uid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_uid"));
    public static VarHandle pw_uid$VH() {
        return passwd.pw_uid$VH;
    }
    public static int pw_uid$get(MemorySegment seg) {
        return (int)passwd.pw_uid$VH.get(seg);
    }
    public static void pw_uid$set( MemorySegment seg, int x) {
        passwd.pw_uid$VH.set(seg, x);
    }
    public static int pw_uid$get(MemorySegment seg, long index) {
        return (int)passwd.pw_uid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_uid$set(MemorySegment seg, long index, int x) {
        passwd.pw_uid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_gid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_gid"));
    public static VarHandle pw_gid$VH() {
        return passwd.pw_gid$VH;
    }
    public static int pw_gid$get(MemorySegment seg) {
        return (int)passwd.pw_gid$VH.get(seg);
    }
    public static void pw_gid$set( MemorySegment seg, int x) {
        passwd.pw_gid$VH.set(seg, x);
    }
    public static int pw_gid$get(MemorySegment seg, long index) {
        return (int)passwd.pw_gid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_gid$set(MemorySegment seg, long index, int x) {
        passwd.pw_gid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_change$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_change"));
    public static VarHandle pw_change$VH() {
        return passwd.pw_change$VH;
    }
    public static long pw_change$get(MemorySegment seg) {
        return (long)passwd.pw_change$VH.get(seg);
    }
    public static void pw_change$set( MemorySegment seg, long x) {
        passwd.pw_change$VH.set(seg, x);
    }
    public static long pw_change$get(MemorySegment seg, long index) {
        return (long)passwd.pw_change$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_change$set(MemorySegment seg, long index, long x) {
        passwd.pw_change$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_class"));
    public static VarHandle pw_class$VH() {
        return passwd.pw_class$VH;
    }
    public static MemoryAddress pw_class$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_class$VH.get(seg);
    }
    public static void pw_class$set( MemorySegment seg, MemoryAddress x) {
        passwd.pw_class$VH.set(seg, x);
    }
    public static MemoryAddress pw_class$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_class$set(MemorySegment seg, long index, MemoryAddress x) {
        passwd.pw_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_gecos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_gecos"));
    public static VarHandle pw_gecos$VH() {
        return passwd.pw_gecos$VH;
    }
    public static MemoryAddress pw_gecos$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_gecos$VH.get(seg);
    }
    public static void pw_gecos$set( MemorySegment seg, MemoryAddress x) {
        passwd.pw_gecos$VH.set(seg, x);
    }
    public static MemoryAddress pw_gecos$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_gecos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_gecos$set(MemorySegment seg, long index, MemoryAddress x) {
        passwd.pw_gecos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_dir$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_dir"));
    public static VarHandle pw_dir$VH() {
        return passwd.pw_dir$VH;
    }
    public static MemoryAddress pw_dir$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_dir$VH.get(seg);
    }
    public static void pw_dir$set( MemorySegment seg, MemoryAddress x) {
        passwd.pw_dir$VH.set(seg, x);
    }
    public static MemoryAddress pw_dir$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_dir$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_dir$set(MemorySegment seg, long index, MemoryAddress x) {
        passwd.pw_dir$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_shell$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_shell"));
    public static VarHandle pw_shell$VH() {
        return passwd.pw_shell$VH;
    }
    public static MemoryAddress pw_shell$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_shell$VH.get(seg);
    }
    public static void pw_shell$set( MemorySegment seg, MemoryAddress x) {
        passwd.pw_shell$VH.set(seg, x);
    }
    public static MemoryAddress pw_shell$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)passwd.pw_shell$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_shell$set(MemorySegment seg, long index, MemoryAddress x) {
        passwd.pw_shell$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pw_expire$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pw_expire"));
    public static VarHandle pw_expire$VH() {
        return passwd.pw_expire$VH;
    }
    public static long pw_expire$get(MemorySegment seg) {
        return (long)passwd.pw_expire$VH.get(seg);
    }
    public static void pw_expire$set( MemorySegment seg, long x) {
        passwd.pw_expire$VH.set(seg, x);
    }
    public static long pw_expire$get(MemorySegment seg, long index) {
        return (long)passwd.pw_expire$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pw_expire$set(MemorySegment seg, long index, long x) {
        passwd.pw_expire$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


