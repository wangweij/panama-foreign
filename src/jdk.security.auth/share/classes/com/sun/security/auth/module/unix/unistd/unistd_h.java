// Generated by jextract

package com.sun.security.auth.module.unix.unistd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class unistd_h  {

    /* package-private */ unistd_h() {}
    public static ValueLayout.OfByte C_CHAR = JAVA_BYTE;
    public static ValueLayout.OfShort C_SHORT = JAVA_SHORT;
    public static ValueLayout.OfInt C_INT = JAVA_INT;
    public static ValueLayout.OfLong C_LONG = JAVA_LONG;
    public static ValueLayout.OfLong C_LONG_LONG = JAVA_LONG;
    public static ValueLayout.OfFloat C_FLOAT = JAVA_FLOAT;
    public static ValueLayout.OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS;
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$0.getgid$MH,"getgid");
    }
    public static int getgid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.getgid$MH, "getgid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$0.getgroups$MH,"getgroups");
    }
    public static int getgroups ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.getgroups$MH, "getgroups");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$0.getuid$MH,"getuid");
    }
    public static int getuid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.getuid$MH, "getuid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


