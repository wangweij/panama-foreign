// Generated by jextract

package com.sun.security.auth.module.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$0 {

    static final FunctionDescriptor GetStdHandle$FUNC = FunctionDescriptor.of(ADDRESS,
        JAVA_INT
    );
    static final MethodHandle GetStdHandle$MH = RuntimeHelper.downcallHandle(
        "GetStdHandle",
        constants$0.GetStdHandle$FUNC, false
    );
    static final FunctionDescriptor WriteFile$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS,
        JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle WriteFile$MH = RuntimeHelper.downcallHandle(
        "WriteFile",
        constants$0.WriteFile$FUNC, false
    );
    static final FunctionDescriptor CloseHandle$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle CloseHandle$MH = RuntimeHelper.downcallHandle(
        "CloseHandle",
        constants$0.CloseHandle$FUNC, false
    );
    static final FunctionDescriptor GetLastError$FUNC = FunctionDescriptor.of(JAVA_INT);
    static final MethodHandle GetLastError$MH = RuntimeHelper.downcallHandle(
        "GetLastError",
        constants$0.GetLastError$FUNC, false
    );
    static final FunctionDescriptor HeapFree$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        JAVA_INT,
        ADDRESS
    );
    static final MethodHandle HeapFree$MH = RuntimeHelper.downcallHandle(
        "HeapFree",
        constants$0.HeapFree$FUNC, false
    );
    static final FunctionDescriptor GetProcessHeap$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle GetProcessHeap$MH = RuntimeHelper.downcallHandle(
        "GetProcessHeap",
        constants$0.GetProcessHeap$FUNC, false
    );
}


